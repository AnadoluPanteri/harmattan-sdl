Index: repo/configure.in
===================================================================
--- repo.orig/configure.in
+++ repo/configure.in
@@ -985,6 +985,7 @@ AC_HELP_STRING([--enable-x11-shared], [d
                     x11ext_lib=[`find_lib "libXext.so.*" "$X_LIBS -L/usr/X11/$base_libdir -L/usr/X11R6/$base_libdir" | sed 's/.*\/\(.*\)/\1/; q'`]
                     xrender_lib=[`find_lib "libXrender.so.*" "$X_LIBS -L/usr/X11/$base_libdir -L/usr/X11R6/$base_libdir" | sed 's/.*\/\(.*\)/\1/; q'`]
                     xrandr_lib=[`find_lib "libXrandr.so.*" "$X_LIBS -L/usr/X11/$base_libdir -L/usr/X11R6/$base_libdir" | sed 's/.*\/\(.*\)/\1/; q'`]
+                    xi_lib=[`find_lib "libXi.so.*" "$X_LIBS -L/usr/X11/$base_libdir -L/usr/X11R6/$base_libdir" | sed 's/.*\/\(.*\)/\1/; q'`]
                     ;;
             esac
 
@@ -1102,6 +1103,33 @@ AC_HELP_STRING([--enable-video-x11-xrand
             if test x$definitely_enable_video_x11_xrandr = xyes; then
                 AC_DEFINE(SDL_VIDEO_DRIVER_X11_XRANDR)
             fi
+            AC_ARG_ENABLE(video-x11-xinput2,
+AC_HELP_STRING([--enable-video-x11-xinput2], [enable X11 XInput2 extension for multitouch input [[default=yes]]]),
+                            , enable_video_x11_xinput2=yes)
+            if test x$enable_video_x11_xinput2 = xyes; then
+                definitely_enable_video_x11_xinput2=no
+                AC_CHECK_HEADER(X11/extensions/XInput2.h,
+                                have_xinput2_h_hdr=yes,
+                                have_xinput2_h_hdr=no,
+                                [#include <X11/Xlib.h>
+                                ])
+                if test x$have_xinput2_h_hdr = xyes; then
+                    if test x$enable_x11_shared = xyes && test x$xi_lib != x ; then
+                        echo "-- dynamic libXi -> $xi_lib"
+                        AC_DEFINE_UNQUOTED(SDL_VIDEO_DRIVER_X11_DYNAMIC_XI, "$xi_lib")
+                        definitely_enable_video_x11_xinput2=yes
+                    else
+                        AC_CHECK_LIB(Xi, XIQueryVersion, have_xi_lib=yes)
+                        if test x$have_xi_lib = xyes ; then
+                            EXTRA_LDFLAGS="$EXTRA_LDFLAGS -lXi"
+                            definitely_enable_video_x11_xinput2=yes
+                        fi
+                    fi
+                fi
+            fi
+            if test x$definitely_enable_video_x11_xinput2 = xyes; then
+                AC_DEFINE(SDL_VIDEO_DRIVER_X11_XINPUT2)
+            fi
         fi
     fi
 }
Index: repo/include/SDL_config.h.in
===================================================================
--- repo.orig/include/SDL_config.h.in
+++ repo/include/SDL_config.h.in
@@ -285,10 +285,12 @@
 #undef SDL_VIDEO_DRIVER_X11_DGAMOUSE
 #undef SDL_VIDEO_DRIVER_X11_DYNAMIC
 #undef SDL_VIDEO_DRIVER_X11_DYNAMIC_XEXT
+#undef SDL_VIDEO_DRIVER_X11_DYNAMIC_XI
 #undef SDL_VIDEO_DRIVER_X11_DYNAMIC_XRANDR
 #undef SDL_VIDEO_DRIVER_X11_DYNAMIC_XRENDER
 #undef SDL_VIDEO_DRIVER_X11_VIDMODE
 #undef SDL_VIDEO_DRIVER_X11_XINERAMA
+#undef SDL_VIDEO_DRIVER_X11_XINPUT2
 #undef SDL_VIDEO_DRIVER_X11_XME
 #undef SDL_VIDEO_DRIVER_X11_XRANDR
 #undef SDL_VIDEO_DRIVER_X11_XV
Index: repo/src/video/x11/SDL_x11dyn.c
===================================================================
--- repo.orig/src/video/x11/SDL_x11dyn.c
+++ repo/src/video/x11/SDL_x11dyn.c
@@ -52,6 +52,10 @@ typedef struct
 #ifndef SDL_VIDEO_DRIVER_X11_DYNAMIC_XRANDR
 #define SDL_VIDEO_DRIVER_X11_DYNAMIC_XRANDR NULL
 #endif
+#ifndef SDL_VIDEO_DRIVER_X11_DYNAMIC_XI
+#define SDL_VIDEO_DRIVER_X11_DYNAMIC_XI NULL
+#endif
+
 
 static x11dynlib x11libs[] =
 {
@@ -59,6 +63,7 @@ static x11dynlib x11libs[] =
     { NULL, SDL_VIDEO_DRIVER_X11_DYNAMIC_XEXT },
     { NULL, SDL_VIDEO_DRIVER_X11_DYNAMIC_XRENDER },
     { NULL, SDL_VIDEO_DRIVER_X11_DYNAMIC_XRANDR },
+    { NULL, SDL_VIDEO_DRIVER_X11_DYNAMIC_XI },
 };
 
 static void X11_GetSym(const char *fnname, int *rc, void **fn)
Index: repo/src/video/x11/SDL_x11sym.h
===================================================================
--- repo.orig/src/video/x11/SDL_x11sym.h
+++ repo/src/video/x11/SDL_x11sym.h
@@ -193,5 +193,17 @@ SDL_X11_SYM(Status,XRRSetScreenConfig,(D
 SDL_X11_SYM(void,XRRFreeScreenConfigInfo,(XRRScreenConfiguration *config),(config),)
 #endif
 
+/* XInput2 support */
+#if SDL_VIDEO_DRIVER_X11_XINPUT2
+SDL_X11_MODULE(XI)
+SDL_X11_SYM(Status,XIQueryVersion,(Display *dpy, int *major_version_inout, int *minor_version_inout),(dpy,major_version_inout,minor_version_inout),return)
+SDL_X11_SYM(XIDeviceInfo*,XIQueryDevice,(Display *dpy, int deviceid, int *ndevices_return),(dpy,deviceid,ndevices_return),return)
+SDL_X11_SYM(int,XISelectEvents,(Display *dpy, Window win, XIEventMask *masks, int num_masks),(dpy,win,masks,num_masks),return)
+SDL_X11_SYM(void,XIFreeDeviceInfo,(XIDeviceInfo *info),(info),)
+/* These are technically Xlib symbols, but we only use them if XInput2 is enabled. */
+SDL_X11_SYM(Bool,XGetEventData,(Display *dpy, XGenericEventCookie *cookie),(dpy,cookie),return)
+SDL_X11_SYM(void,XFreeEventData,(Display *dpy, XGenericEventCookie *cookie),(dpy,cookie),)
+#endif
+
 /* end of SDL_x11sym.h ... */
 
Index: repo/src/video/x11/SDL_x11video.h
===================================================================
--- repo.orig/src/video/x11/SDL_x11video.h
+++ repo/src/video/x11/SDL_x11video.h
@@ -46,6 +46,9 @@
 #if SDL_VIDEO_DRIVER_X11_XME
 #include "../Xext/extensions/xme.h"
 #endif
+#if SDL_VIDEO_DRIVER_X11_XINPUT2
+#include <X11/extensions/XInput2.h>
+#endif
 
 #include "SDL_x11dyn.h"
 
@@ -130,6 +133,12 @@ struct SDL_PrivateVideoData {
     int saved_size_id;
     Rotation saved_rotation;
 #endif
+#if SDL_VIDEO_DRIVER_X11_XINPUT2
+    int use_xinput2;
+    int xi_opcode;
+    XIDeviceInfo *xi_master;
+    int have_touch;
+#endif
 #if SDL_VIDEO_DRIVER_X11_VIDMODE
     SDL_NAME(XF86VidModeModeInfo) saved_mode;
     struct {
@@ -195,6 +204,10 @@ struct SDL_PrivateVideoData {
 #define screen_config		(this->hidden->screen_config)
 #define saved_size_id		(this->hidden->saved_size_id)
 #define saved_rotation		(this->hidden->saved_rotation)
+#define use_xinput2		(this->hidden->use_xinput2)
+#define xi_opcode			(this->hidden->xi_opcode)
+#define xi_master			(this->hidden->xi_master)
+#define have_touch			(this->hidden->have_touch)
 #define use_xinerama		(this->hidden->use_xinerama)
 #define use_vidmode		(this->hidden->use_vidmode)
 #define use_xrandr		(this->hidden->use_xrandr)
Index: repo/src/video/x11/SDL_x11dyn.h
===================================================================
--- repo.orig/src/video/x11/SDL_x11dyn.h
+++ repo/src/video/x11/SDL_x11dyn.h
@@ -49,6 +49,10 @@
 #include <X11/extensions/Xrandr.h>
 #endif
 
+#if SDL_VIDEO_DRIVER_X11_XINPUT2
+#include <X11/extensions/XInput2.h>
+#endif
+
 /*
  * When using the "dynamic X11" functionality, we duplicate all the Xlib
  *  symbols that would be referenced by SDL inside of SDL itself.
Index: repo/src/video/x11/SDL_x11video.c
===================================================================
--- repo.orig/src/video/x11/SDL_x11video.c
+++ repo/src/video/x11/SDL_x11video.c
@@ -625,6 +625,41 @@ static int X11_VideoInit(_THIS, SDL_Pixe
 	}
 #endif /* NO_SHARED_MEMORY */
 
+#if SDL_VIDEO_DRIVER_X11_XINPUT2
+	use_xinput2 = 0;
+	have_touch = 0;
+	xi_master = NULL;
+	if (SDL_X11_HAVE_XI) {
+		int event, error;
+		if (XQueryExtension(SDL_Display, "XInputExtension", &xi_opcode,
+				&event, &error)) {
+			int major = 2;
+			int minor = 0;
+			if (XIQueryVersion(SDL_Display, &major, &minor) == Success) {
+				use_xinput2 = 1;
+			}
+		}
+		if (use_xinput2) {
+			/* Find the master pointer and keep a reference to it. */
+			int device_count = 0;
+			XIDeviceInfo *devices = XIQueryDevice(SDL_Display, XIAllMasterDevices, &device_count);
+			if (devices) {
+				for (i = 0; i < device_count; i++) {
+					if (devices[i].use == XIMasterPointer) {
+						X11_XInput2_SetMasterPointer(this, devices[i].deviceid);
+						break;
+					}
+				}
+				XIFreeDeviceInfo(devices);
+			}
+			if (!xi_master) {
+				/* No master pointer found? Broken XInput configuration. */
+				use_xinput2 = 0;
+			}
+		}
+	}
+#endif /* SDL_VIDEO_DRIVER_X11_XINPUT2 */
+
 	/* Get the available video modes */
 	if(X11_GetVideoModes(this) < 0) {
 		XCloseDisplay(GFX_Display);
@@ -1045,10 +1080,31 @@ static int X11_CreateWindow(_THIS, SDL_S
 		                           	| CWColormap, &swa);
 		}
 		/* Only manage our input if we own the window */
-		XSelectInput(SDL_Display, SDL_Window,
-					( EnterWindowMask | LeaveWindowMask
-					| ButtonPressMask | ButtonReleaseMask
-					| PointerMotionMask | ExposureMask ));
+		int event_mask = EnterWindowMask | LeaveWindowMask
+						| ButtonPressMask | ButtonReleaseMask
+						| PointerMotionMask | ExposureMask;
+#if SDL_VIDEO_DRIVER_X11_XINPUT2
+		if (use_xinput2) {
+			XIEventMask mask;
+			unsigned char bitmask[XIMaskLen(XI_LASTEVENT)] = { 0 };
+			mask.deviceid = XIAllMasterDevices;
+			mask.mask = bitmask;
+			mask.mask_len = sizeof(bitmask);
+
+			/* For now, just capture mouse events. */
+			XISetMask(bitmask, XI_ButtonPress);
+			XISetMask(bitmask, XI_ButtonRelease);
+			XISetMask(bitmask, XI_Motion);
+			/* As well as new device events. */
+			XISetMask(bitmask, XI_DeviceChanged);
+
+			XISelectEvents(SDL_Display, SDL_Window, &mask, 1);
+
+			/* We are no longer interested in the core protocol events. */
+			event_mask &= ~(ButtonPressMask | ButtonReleaseMask | PointerMotionMask);
+		}
+#endif
+		XSelectInput(SDL_Display, SDL_Window, event_mask);
 	}
 	/* Create the graphics context here, once we have a window */
 	if ( flags & SDL_OPENGLES ) {
Index: repo/src/video/x11/SDL_x11events.c
===================================================================
--- repo.orig/src/video/x11/SDL_x11events.c
+++ repo/src/video/x11/SDL_x11events.c
@@ -24,6 +24,7 @@
 /* Handle the event stream, converting X11 events into SDL events */
 
 #include <setjmp.h>
+#include <math.h>
 #include <X11/Xlib.h>
 #include <X11/Xutil.h>
 #include <X11/keysym.h>
@@ -385,6 +386,170 @@ static __inline__ int X11_WarpedMotion(_
 	return(posted);
 }
 
+#if SDL_VIDEO_DRIVER_X11_XINPUT2
+int X11_XInput2_SetMasterPointer(_THIS, int deviceid)
+{
+	int device_count = 0, i;
+	if (xi_master) {
+		XIFreeDeviceInfo(xi_master);
+		xi_master = NULL;
+	}
+
+	have_touch = 0;
+
+	xi_master = XIQueryDevice(SDL_Display, deviceid, &device_count);
+	if (!xi_master) {
+		/* Master deviceid no longer exists? */
+		return -1;
+	}
+
+	for (i = 0; i < xi_master->num_classes; i++) {
+		if (xi_master->classes[i]->type == XIValuatorClass) {
+			XIValuatorClassInfo *valuator = (XIValuatorClassInfo*)(xi_master->classes[i]);
+			if (valuator->label == atom(AbsMTTrackingID)) {
+				have_touch = 1;
+				break;
+			}
+		}
+	}
+
+	return 0;
+}
+
+static inline void X11_XInput2_ClipTouch(Sint16* val, int min, int size)
+{
+	if (*val < min || *val > (min + size)) {
+		*val = -1;
+	} else {
+		*val -= min;
+	}
+}
+
+static int X11_XInput2_DispatchTouchDeviceEvent(_THIS, XIDeviceEvent *e)
+{
+	double v;
+	Sint16 x, y;
+	Uint16 active;
+	int i;
+
+	/* Sadly, we need to scale and clip the coordinates on our own. Prepare for this. */
+	const int screen_w = DisplayWidth(SDL_Display, SDL_Screen);
+	const int screen_h = DisplayHeight(SDL_Display, SDL_Screen);
+
+	active = 0;
+	for (i = 0; i < xi_master->num_classes; i++) {
+		XIAnyClassInfo* any = xi_master->classes[i];
+		if (xi_master->classes[i]->type == XIValuatorClass) {
+			XIValuatorClassInfo *valuator = (XIValuatorClassInfo*)(xi_master->classes[i]);
+			int n = valuator->number;
+
+			if (!XIMaskIsSet(e->valuators.mask, n)) {
+				/* This event does not contain this evaluator's value. */
+				continue;
+			}
+
+			if (valuator->label == atom(AbsMTPositionX)) {
+				v = e->valuators.values[n];
+				v = (v - valuator->min) / (valuator->max - valuator->min);
+				x = round(screen_w * v);
+				X11_XInput2_ClipTouch(&x, window_x, window_w);
+			} else if (valuator->label == atom(AbsMTPositionY)) {
+				v = e->valuators.values[n];
+				v = (v - valuator->min) / (valuator->max - valuator->min);
+				y = round(screen_h * v);
+				X11_XInput2_ClipTouch(&y, window_y, window_h);
+			} else if (valuator->label == atom(AbsMTTrackingID)) {
+				/* Tracking ID is always the last valuator for a contact point,
+				 * and indicates which finger we have been talking about previously. */
+				int id = e->valuators.values[n];
+				if (id >= SDL_MAXMOUSE) {
+					/* Too many contact points! Discard! */
+					continue;
+				}
+				if (x == -1 || y == -1) {
+					/* Outside of the window, discard. */
+					continue;
+				}
+				active |= 1 << id;
+				if (SDL_GetMultiMouseState(id, NULL, NULL)) {
+					/* We already knew about this finger; therefore, this is motion. */
+					SDL_PrivateMultiMouseMotion(id, SDL_BUTTON_LMASK, 0, x, y);
+				} else {
+					/* We did not know about this finger; therefore, this is a button press. */
+					SDL_PrivateMultiMouseMotion(id, 0, 0, x, y);
+					SDL_PrivateMultiMouseButton(id, SDL_PRESSED, SDL_BUTTON_LEFT, 0, 0);
+				}
+			}
+		}
+	}
+
+	/* Now enumerate all mouses and kill those that are not active. */
+	for (i = 0; i < SDL_MAXMOUSE; i++) {
+		if (!(active & (1 << i))) {
+			SDL_ResetMultiMouse(i); /* Will send released events for pressed buttons. */
+		}
+	}
+
+	return 1;
+}
+
+static int X11_XInput2_DispatchPointerDeviceEvent(_THIS, XIDeviceEvent *e)
+{
+	switch (e->evtype) {
+		case XI_ButtonPress:
+			return SDL_PrivateMouseButton(SDL_PRESSED, e->detail, 0, 0);
+		case XI_ButtonRelease:
+			return SDL_PrivateMouseButton(SDL_RELEASED, e->detail, 0, 0);
+		case XI_Motion:
+			if ( SDL_VideoSurface ) {
+				int x = round(e->event_x), y = round(e->event_y);
+#ifdef DEBUG_MOTION
+	  			printf("X11 motion: %d,%d\n", x, y);
+#endif
+				return SDL_PrivateMouseMotion(0, 0, x, y);
+			}
+		default:
+			return 0;
+	}
+}
+
+static int X11_XInput2_DispatchDeviceChangedEvent(_THIS, XIDeviceChangedEvent *e)
+{
+	if (xi_master && e->deviceid == xi_master->deviceid) {
+		/* Only care about slave change events of the master pointer, for now. */
+		SDL_ResetMouse();
+		X11_XInput2_SetMasterPointer(this, e->deviceid);
+		return 1;
+	}
+	return 0;
+}
+
+static int X11_XInput2_DispatchEvent(_THIS, XIEvent *xevent)
+{
+	switch (xevent->evtype) {
+		case XI_ButtonPress:
+		case XI_ButtonRelease:
+		case XI_Motion:
+			if (have_touch) {
+				return X11_XInput2_DispatchTouchDeviceEvent(this, (XIDeviceEvent*) xevent);
+			} else {
+				return X11_XInput2_DispatchPointerDeviceEvent(this, (XIDeviceEvent*) xevent);
+			}
+			break;
+		case XI_DeviceChanged:
+			X11_XInput2_DispatchDeviceChangedEvent(this, (XIDeviceChangedEvent*) xevent);
+			return 1;
+			break;
+		default:
+#ifdef DEBUG_XEVENTS
+			printf("Unhandled XInput2 event %d\n", xevent->evtype);
+#endif
+			return 0;
+			break;
+	}
+}
+#endif /* SDL_VIDEO_DRIVER_X11_XINPUT2 */
+
 static int X11_DispatchEvent(_THIS)
 {
 	int posted;
@@ -867,6 +1032,17 @@ printf("Expose (count = %d)\n", xevent.x
 	    }
 	    break;
 
+		case GenericEvent:
+#if SDL_VIDEO_DRIVER_X11_XINPUT2
+			if (use_xinput2 && xevent.xcookie.extension == xi_opcode) {
+				if (XGetEventData(SDL_Display, &xevent.xcookie)) {
+					posted = X11_XInput2_DispatchEvent(this, (XIEvent*) xevent.xcookie.data);
+					XFreeEventData(SDL_Display, &xevent.xcookie);
+				}
+			}
+#endif /* SDL_VIDEO_DRIVER_X11_XINPUT2 */
+		break;
+
 	    default: {
 #ifdef DEBUG_XEVENTS
 printf("Unhandled event %d\n", xevent.type);
Index: repo/src/video/x11/SDL_x11atoms.h
===================================================================
--- repo.orig/src/video/x11/SDL_x11atoms.h
+++ repo/src/video/x11/SDL_x11atoms.h
@@ -27,3 +27,9 @@ SDL_X11_ATOM(_NET_WM_PID, "_NET_WM_PID")
 SDL_X11_ATOM(_NET_WM_STATE, "_NET_WM_STATE")
 SDL_X11_ATOM(_NET_WM_STATE_FULLSCREEN, "_NET_WM_STATE_FULLSCREEN")
 
+#if SDL_VIDEO_DRIVER_X11_XINPUT2
+SDL_X11_ATOM(AbsMTTrackingID, "Abs MT Tracking ID")
+SDL_X11_ATOM(AbsMTPositionX, "Abs MT Position X")
+SDL_X11_ATOM(AbsMTPositionY, "Abs MT Position Y")
+#endif /* SDL_VIDEO_DRIVER_X11_XINPUT2 */
+
Index: repo/src/video/x11/SDL_x11events_c.h
===================================================================
--- repo.orig/src/video/x11/SDL_x11events_c.h
+++ repo/src/video/x11/SDL_x11events_c.h
@@ -27,3 +27,7 @@
 extern void X11_InitOSKeymap(_THIS);
 extern void X11_PumpEvents(_THIS);
 extern void X11_SetKeyboardState(Display *display, const char *key_vec);
+
+#if SDL_VIDEO_DRIVER_X11_XINPUT2
+extern int X11_XInput2_SetMasterPointer(_THIS, int deviceid);
+#endif /* SDL_VIDEO_DRIVER_X11_XINPUT2 */
