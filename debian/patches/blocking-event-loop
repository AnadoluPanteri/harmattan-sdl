Index: repo/configure.in
===================================================================
--- repo.orig/configure.in
+++ repo/configure.in
@@ -143,7 +143,7 @@ if test x$enable_libc = xyes; then
 
     dnl Check for C library headers
     AC_HEADER_STDC
-    AC_CHECK_HEADERS(sys/types.h stdio.h stdlib.h stddef.h stdarg.h malloc.h memory.h string.h strings.h inttypes.h stdint.h ctype.h math.h iconv.h signal.h)
+    AC_CHECK_HEADERS(sys/types.h stdio.h stdlib.h stddef.h stdarg.h malloc.h memory.h string.h strings.h inttypes.h stdint.h ctype.h math.h iconv.h signal.h unistd.h fcntl.h)
 
     dnl Check for typedefs, structures, etc.
     AC_TYPE_SIZE_T
Index: repo/include/SDL_config.h.in
===================================================================
--- repo.orig/include/SDL_config.h.in
+++ repo/include/SDL_config.h.in
@@ -75,6 +75,8 @@
 #undef HAVE_MATH_H
 #undef HAVE_ICONV_H
 #undef HAVE_SIGNAL_H
+#undef HAVE_UNISTD_H
+#undef HAVE_FCNTL_H
 #undef HAVE_ALTIVEC_H
 
 /* C library functions */
Index: repo/src/events/SDL_events.c
===================================================================
--- repo.orig/src/events/SDL_events.c
+++ repo/src/events/SDL_events.c
@@ -59,6 +59,14 @@ static struct {
 static SDL_Thread *SDL_EventThread = NULL;	/* Thread handle */
 static Uint32 event_thread;			/* The event thread id */
 
+#if defined(HAVE_UNISTD_H) && defined(HAVE_FCNTL_H)
+#define SDL_EVENT_WAKEUP_PIPE 1
+#include <unistd.h> /* for pipe(),select() */
+#include <fcntl.h>  /* for fcntl() */
+
+static int wakeup_pipe[2] = { -1, -1 };
+#endif
+
 void SDL_Lock_EventThread(void)
 {
 	if ( SDL_EventThread && (SDL_ThreadID() != event_thread) ) {
@@ -188,6 +196,12 @@ static void SDL_StopEventThread(void)
 {
 	SDL_EventQ.active = 0;
 	if ( SDL_EventThread ) {
+#ifdef SDL_EVENT_WAKEUP_PIPE
+		if (wakeup_pipe[1] != -1) {
+			/* Ensure a possibly blocked event thread is awaken. */
+			write(wakeup_pipe[1], "Q", 1);
+		}
+#endif
 		SDL_WaitThread(SDL_EventThread, NULL);
 		SDL_EventThread = NULL;
 		SDL_DestroyMutex(SDL_EventLock.lock);
@@ -221,6 +235,13 @@ void SDL_StopEventLoop(void)
 	SDL_EventQ.head = 0;
 	SDL_EventQ.tail = 0;
 	SDL_EventQ.wmmsg_next = 0;
+
+#ifdef SDL_EVENT_WAKEUP_PIPE
+	close(wakeup_pipe[0]);
+	close(wakeup_pipe[1]);
+	wakeup_pipe[0] = -1;
+	wakeup_pipe[1] = -1;
+#endif
 }
 
 /* This function (and associated calls) may be called more than once */
@@ -241,6 +262,18 @@ int SDL_StartEventLoop(Uint32 flags)
 	SDL_eventstate &= ~(0x00000001 << SDL_SYSWMEVENT);
 	SDL_ProcessEvents[SDL_SYSWMEVENT] = SDL_IGNORE;
 
+#ifdef SDL_EVENT_WAKEUP_PIPE
+	retcode = pipe(wakeup_pipe);
+	if (retcode != 0) {
+		return -1;
+	}
+	retcode += fcntl(wakeup_pipe[0], F_SETFD, FD_CLOEXEC);
+	retcode += fcntl(wakeup_pipe[1], F_SETFD, FD_CLOEXEC);
+	if (retcode != 0) {
+		return -1;
+	}
+#endif
+
 	/* Initialize event handlers */
 	retcode = 0;
 	retcode += SDL_AppActiveInit();
@@ -283,6 +316,11 @@ static int SDL_AddEvent(SDL_Event *event
 		SDL_EventQ.tail = tail;
 		added = 1;
 	}
+#ifdef SDL_EVENT_WAKEUP_PIPE
+	if (added && wakeup_pipe[1] != -1) {
+		write(wakeup_pipe[1], "E", 1);
+	}
+#endif
 	return(added);
 }
 
@@ -290,6 +328,13 @@ static int SDL_AddEvent(SDL_Event *event
 /*                           -- called with the queue locked */
 static int SDL_CutEvent(int spot)
 {
+#ifdef SDL_EVENT_WAKEUP_PIPE
+	if (wakeup_pipe[0] != -1) {
+		/* Read one character from the pipe. */
+		char c;
+		read(wakeup_pipe[0], &c, 1);
+	}
+#endif
 	if ( spot == SDL_EventQ.head ) {
 		SDL_EventQ.head = (SDL_EventQ.head+1)%MAXEVENTS;
 		return(SDL_EventQ.head);
@@ -388,6 +433,35 @@ void SDL_PumpEvents(void)
 	}
 }
 
+void SDL_WaitForEvent(void)
+{
+#ifdef SDL_EVENT_WAKEUP_PIPE
+	int can_select = current_video && current_video->can_select &&
+		wakeup_pipe[0] != -1 &&
+		(SDL_numjoysticks == 0 || !(SDL_eventstate & SDL_JOYEVENTMASK));
+	if (can_select) {
+		int vfd = current_video->monitor_fd;
+		int nfds;
+		fd_set rfds;
+
+		FD_ZERO(&rfds);
+		FD_SET(wakeup_pipe[0], &rfds);
+		nfds = wakeup_pipe[0] + 1;
+
+		if ( vfd != -1 ) {
+			/* Also monitor video device FD if any. */
+			FD_SET(vfd, &rfds);
+			if (vfd + 1 > nfds) nfds = vfd + 1;
+		}
+
+		select(nfds, &rfds, NULL, NULL, NULL);
+
+		return;
+	}
+#endif
+	SDL_Delay(10);
+}
+
 /* Public functions */
 
 int SDL_PollEvent (SDL_Event *event)
@@ -407,7 +481,7 @@ int SDL_WaitEvent (SDL_Event *event)
 		switch(SDL_PeepEvents(event, 1, SDL_GETEVENT, SDL_ALLEVENTS)) {
 		    case -1: return 0;
 		    case 1: return 1;
-		    case 0: SDL_Delay(10);
+		    case 0: SDL_WaitForEvent();
 		}
 	}
 }
Index: repo/src/video/SDL_sysvideo.h
===================================================================
--- repo.orig/src/video/SDL_sysvideo.h
+++ repo/src/video/SDL_sysvideo.h
@@ -273,6 +273,8 @@ struct SDL_VideoDevice {
 
 	/* Driver information flags */
 	int handles_any_size;	/* Driver handles any size video mode */
+	int can_select;			/* This driver supports a select() event loop. */
+	int monitor_fd;			/* FD to monitor if select event loop is available. */
 
 	/* * * */
 	/* Data used by the GL drivers */
