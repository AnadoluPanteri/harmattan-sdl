Index: SDL-1.2.14/src/audio/SDL_audio.c
===================================================================
--- SDL-1.2.14.orig/src/audio/SDL_audio.c
+++ SDL-1.2.14/src/audio/SDL_audio.c
@@ -223,8 +223,8 @@ int SDLCALL SDL_RunAudio(void *audiop)
 		}
 	}
 
-	/* Wait for the audio to drain.. */
-	if ( audio->WaitDone ) {
+	/* Wait for the audio to drain if not paused */
+	if ( !audio->paused && audio->WaitDone ) {
 		audio->WaitDone(audio);
 	}
 
@@ -590,6 +590,9 @@ void SDL_PauseAudio (int pause_on)
 	SDL_AudioDevice *audio = current_audio;
 
 	if ( audio ) {
+		if ( audio->PauseAudio ) {
+			audio->PauseAudio(audio, pause_on);
+		}
 		audio->paused = pause_on;
 	}
 }
@@ -625,6 +628,9 @@ void SDL_AudioQuit(void)
 
 	if ( audio ) {
 		audio->enabled = 0;
+		if ( audio->thread && audio->CancelAudio ) {
+			audio->CancelAudio(audio);
+		}
 		if ( audio->thread != NULL ) {
 			SDL_WaitThread(audio->thread, NULL);
 		}
Index: SDL-1.2.14/src/audio/SDL_sysaudio.h
===================================================================
--- SDL-1.2.14.orig/src/audio/SDL_sysaudio.h
+++ SDL-1.2.14/src/audio/SDL_sysaudio.h
@@ -52,6 +52,8 @@ struct SDL_AudioDevice {
 	void (*PlayAudio)(_THIS);
 	Uint8 *(*GetAudioBuf)(_THIS);
 	void (*WaitDone)(_THIS);
+	void (*PauseAudio)(_THIS, int pause_on);
+	void (*CancelAudio)(_THIS);
 	void (*CloseAudio)(_THIS);
 
 	/* * * */
Index: SDL-1.2.14/src/audio/pulse/SDL_pulseaudio.c
===================================================================
--- SDL-1.2.14.orig/src/audio/pulse/SDL_pulseaudio.c
+++ SDL-1.2.14/src/audio/pulse/SDL_pulseaudio.c
@@ -54,6 +54,8 @@ static int PULSE_OpenAudio(_THIS, SDL_Au
 static void PULSE_WaitAudio(_THIS);
 static void PULSE_PlayAudio(_THIS);
 static Uint8 *PULSE_GetAudioBuf(_THIS);
+static void PULSE_PauseAudio(_THIS, int pause_on);
+static void PULSE_CancelAudio(_THIS);
 static void PULSE_CloseAudio(_THIS);
 static void PULSE_WaitDone(_THIS);
 
@@ -85,6 +87,7 @@ static pa_channel_map* (*SDL_NAME(pa_cha
 pa_mainloop * (*SDL_NAME(pa_mainloop_new))(void);
 pa_mainloop_api * (*SDL_NAME(pa_mainloop_get_api))(pa_mainloop *m);
 int (*SDL_NAME(pa_mainloop_iterate))(pa_mainloop *m, int block, int *retval);
+void (*SDL_NAME(pa_mainloop_wakeup))(pa_mainloop *m);
 void (*SDL_NAME(pa_mainloop_free))(pa_mainloop *m);
 
 pa_operation_state_t (*SDL_NAME(pa_operation_get_state))(pa_operation *o);
@@ -111,6 +114,8 @@ int (*SDL_NAME(pa_stream_write))(pa_stre
 	pa_free_cb_t free_cb, int64_t offset, pa_seek_mode_t seek);
 pa_operation * (*SDL_NAME(pa_stream_drain))(pa_stream *s,
 	pa_stream_success_cb_t cb, void *userdata);
+pa_operation * (*SDL_NAME(pa_stream_cork))(pa_stream *s, int b,
+	pa_stream_success_cb_t cb, void *userdata);
 int (*SDL_NAME(pa_stream_disconnect))(pa_stream *s);
 void (*SDL_NAME(pa_stream_unref))(pa_stream *s);
 
@@ -130,6 +135,8 @@ static struct {
 		(void **)&SDL_NAME(pa_mainloop_get_api)		},
 	{ "pa_mainloop_iterate",
 		(void **)&SDL_NAME(pa_mainloop_iterate)		},
+	{ "pa_mainloop_wakeup",
+		(void **)&SDL_NAME(pa_mainloop_wakeup)		},
 	{ "pa_mainloop_free",
 		(void **)&SDL_NAME(pa_mainloop_free)		},
 	{ "pa_operation_get_state",
@@ -160,6 +167,8 @@ static struct {
 		(void **)&SDL_NAME(pa_stream_write)		},
 	{ "pa_stream_drain",
 		(void **)&SDL_NAME(pa_stream_drain)		},
+	{ "pa_stream_cork",
+		(void **)&SDL_NAME(pa_stream_cork)	},
 	{ "pa_stream_disconnect",
 		(void **)&SDL_NAME(pa_stream_disconnect)	},
 	{ "pa_stream_unref",
@@ -279,7 +288,10 @@ static SDL_AudioDevice *Audio_CreateDevi
 	this->WaitAudio = PULSE_WaitAudio;
 	this->PlayAudio = PULSE_PlayAudio;
 	this->GetAudioBuf = PULSE_GetAudioBuf;
+	this->PauseAudio = PULSE_PauseAudio;
+	this->CancelAudio = PULSE_CancelAudio;
 	this->CloseAudio = PULSE_CloseAudio;
+
 	this->WaitDone = PULSE_WaitDone;
 
 	this->free = Audio_DeleteDevice;
@@ -296,7 +308,7 @@ AudioBootStrap PULSE_bootstrap = {
 static void PULSE_WaitAudio(_THIS)
 {
 	int size;
-	while(1) {
+	do {
 		if (SDL_NAME(pa_context_get_state)(context) != PA_CONTEXT_READY ||
 		    SDL_NAME(pa_stream_get_state)(stream) != PA_STREAM_READY ||
 		    SDL_NAME(pa_mainloop_iterate)(mainloop, 1, NULL) < 0) {
@@ -306,7 +318,7 @@ static void PULSE_WaitAudio(_THIS)
 		size = SDL_NAME(pa_stream_writable_size)(stream);
 		if (size >= mixlen)
 			return;
-	}
+	} while (this->enabled);
 }
 
 static void PULSE_PlayAudio(_THIS)
@@ -321,6 +333,30 @@ static Uint8 *PULSE_GetAudioBuf(_THIS)
 	return(mixbuf);
 }
 
+static void stream_cork_complete(pa_stream *s, int success, void *userdata) {
+}
+
+static void PULSE_PauseAudio(_THIS, int pause_on)
+{
+	pa_operation *o;
+
+	o = SDL_NAME(pa_stream_cork)(stream, pause_on, stream_cork_complete, NULL);
+	if (!o)
+		return;
+
+	/* Pausing audio can be an asynchronous operation; we will send silence in the meanwhile. */
+
+	SDL_NAME(pa_operation_unref)(o);
+}
+
+static void PULSE_CancelAudio(_THIS)
+{
+	/* Ensure the audio thread knows it is going to be closed. */
+	if (mainloop != NULL) {
+		SDL_NAME(pa_mainloop_wakeup)(mainloop);
+	}
+}
+
 static void PULSE_CloseAudio(_THIS)
 {
 	if ( mixbuf != NULL ) {
@@ -401,7 +437,7 @@ static int PULSE_OpenAudio(_THIS, SDL_Au
 	pa_sample_spec  paspec;
 	pa_buffer_attr  paattr;
 	pa_channel_map  pacmap;
-	pa_stream_flags_t flags = 0;
+	pa_stream_flags_t flags = PA_STREAM_START_CORKED;
 
 	paspec.format = PA_SAMPLE_INVALID;
 	for ( test_format = SDL_FirstAudioFormat(spec->format); test_format; ) {
@@ -449,7 +485,7 @@ static int PULSE_OpenAudio(_THIS, SDL_Au
 	paattr.maxlength = -1;
 	paattr.minreq = mixlen; /* -1 can lead to pa_stream_writable_size()
 				   >= mixlen never becoming true */
-	flags = PA_STREAM_ADJUST_LATENCY;
+	flags |= PA_STREAM_ADJUST_LATENCY;
 #else
 	paattr.tlength = mixlen*2;
 	paattr.prebuf = mixlen*2;
