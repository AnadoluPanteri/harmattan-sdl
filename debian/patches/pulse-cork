Index: repo/src/audio/SDL_audio.c
===================================================================
--- repo.orig/src/audio/SDL_audio.c
+++ repo/src/audio/SDL_audio.c
@@ -116,6 +116,7 @@ static AudioBootStrap *bootstrap[] = {
 	NULL
 };
 SDL_AudioDevice *current_audio = NULL;
+static int suppress_audio = 0;
 
 /* Various local functions */
 int SDL_AudioInit(const char *driver_name);
@@ -176,6 +177,13 @@ int SDLCALL SDL_RunAudio(void *audiop)
 
 	/* Loop, filling the audio buffers */
 	while ( audio->enabled ) {
+		int pause_on = audio->paused || suppress_audio;
+		if ( audio->dev_paused != pause_on ) {
+			if ( audio->PauseAudio ) {
+				audio->PauseAudio(audio, pause_on);
+			}
+			audio->dev_paused = pause_on;
+		}
 
 		/* Fill the current buffer with sound */
 		if ( audio->convert.needed ) {
@@ -193,7 +201,7 @@ int SDLCALL SDL_RunAudio(void *audiop)
 
 		SDL_memset(stream, silence, stream_len);
 
-		if ( ! audio->paused ) {
+		if ( !pause_on ) {
 			SDL_mutexP(audio->mixer_lock);
 			(*fill)(udata, stream, stream_len);
 			SDL_mutexV(audio->mixer_lock);
@@ -223,8 +231,8 @@ int SDLCALL SDL_RunAudio(void *audiop)
 		}
 	}
 
-	/* Wait for the audio to drain.. */
-	if ( audio->WaitDone ) {
+	/* Wait for the audio to drain if not paused */
+	if ( !audio->paused && !suppress_audio && audio->WaitDone ) {
 		audio->WaitDone(audio);
 	}
 
@@ -576,7 +584,7 @@ SDL_audiostatus SDL_GetAudioStatus(void)
 
 	status = SDL_AUDIO_STOPPED;
 	if ( audio && audio->enabled ) {
-		if ( audio->paused ) {
+		if ( audio->paused || suppress_audio ) {
 			status = SDL_AUDIO_PAUSED;
 		} else {
 			status = SDL_AUDIO_PLAYING;
@@ -591,6 +599,20 @@ void SDL_PauseAudio (int pause_on)
 
 	if ( audio ) {
 		audio->paused = pause_on;
+		if ( !pause_on && audio->thread && audio->WakeAudio ) {
+			audio->WakeAudio(audio);
+		}
+	}
+}
+
+void SDL_SuppressAudio (int pause_on)
+{
+	SDL_AudioDevice *audio = current_audio;
+
+	suppress_audio = pause_on;
+
+	if ( !pause_on && audio && audio->thread && audio->WakeAudio ) {
+		audio->WakeAudio(audio);
 	}
 }
 
@@ -625,6 +647,9 @@ void SDL_AudioQuit(void)
 
 	if ( audio ) {
 		audio->enabled = 0;
+		if ( audio->thread && audio->WakeAudio ) {
+			audio->WakeAudio(audio);
+		}
 		if ( audio->thread != NULL ) {
 			SDL_WaitThread(audio->thread, NULL);
 		}
Index: repo/src/audio/SDL_sysaudio.h
===================================================================
--- repo.orig/src/audio/SDL_sysaudio.h
+++ repo/src/audio/SDL_sysaudio.h
@@ -52,6 +52,8 @@ struct SDL_AudioDevice {
 	void (*PlayAudio)(_THIS);
 	Uint8 *(*GetAudioBuf)(_THIS);
 	void (*WaitDone)(_THIS);
+	void (*PauseAudio)(_THIS, int pause_on);
+	void (*WakeAudio)(_THIS);
 	void (*CloseAudio)(_THIS);
 
 	/* * * */
@@ -71,6 +73,7 @@ struct SDL_AudioDevice {
 	/* Current state flags */
 	int enabled;
 	int paused;
+	int dev_paused;
 	int opened;
 
 	/* Fake audio buffer for when the audio hardware is busy */
Index: repo/src/audio/pulse/SDL_pulseaudio.c
===================================================================
--- repo.orig/src/audio/pulse/SDL_pulseaudio.c
+++ repo/src/audio/pulse/SDL_pulseaudio.c
@@ -54,6 +54,8 @@ static int PULSE_OpenAudio(_THIS, SDL_Au
 static void PULSE_WaitAudio(_THIS);
 static void PULSE_PlayAudio(_THIS);
 static Uint8 *PULSE_GetAudioBuf(_THIS);
+static void PULSE_PauseAudio(_THIS, int pause_on);
+static void PULSE_WakeAudio(_THIS);
 static void PULSE_CloseAudio(_THIS);
 static void PULSE_WaitDone(_THIS);
 
@@ -85,6 +87,7 @@ static pa_channel_map* (*SDL_NAME(pa_cha
 pa_mainloop * (*SDL_NAME(pa_mainloop_new))(void);
 pa_mainloop_api * (*SDL_NAME(pa_mainloop_get_api))(pa_mainloop *m);
 int (*SDL_NAME(pa_mainloop_iterate))(pa_mainloop *m, int block, int *retval);
+void (*SDL_NAME(pa_mainloop_wakeup))(pa_mainloop *m);
 void (*SDL_NAME(pa_mainloop_free))(pa_mainloop *m);
 
 pa_operation_state_t (*SDL_NAME(pa_operation_get_state))(pa_operation *o);
@@ -111,6 +114,8 @@ int (*SDL_NAME(pa_stream_write))(pa_stre
 	pa_free_cb_t free_cb, int64_t offset, pa_seek_mode_t seek);
 pa_operation * (*SDL_NAME(pa_stream_drain))(pa_stream *s,
 	pa_stream_success_cb_t cb, void *userdata);
+pa_operation * (*SDL_NAME(pa_stream_cork))(pa_stream *s, int b,
+	pa_stream_success_cb_t cb, void *userdata);
 int (*SDL_NAME(pa_stream_disconnect))(pa_stream *s);
 void (*SDL_NAME(pa_stream_unref))(pa_stream *s);
 
@@ -130,6 +135,8 @@ static struct {
 		(void **)&SDL_NAME(pa_mainloop_get_api)		},
 	{ "pa_mainloop_iterate",
 		(void **)&SDL_NAME(pa_mainloop_iterate)		},
+	{ "pa_mainloop_wakeup",
+		(void **)&SDL_NAME(pa_mainloop_wakeup)		},
 	{ "pa_mainloop_free",
 		(void **)&SDL_NAME(pa_mainloop_free)		},
 	{ "pa_operation_get_state",
@@ -160,6 +167,8 @@ static struct {
 		(void **)&SDL_NAME(pa_stream_write)		},
 	{ "pa_stream_drain",
 		(void **)&SDL_NAME(pa_stream_drain)		},
+	{ "pa_stream_cork",
+		(void **)&SDL_NAME(pa_stream_cork)	},
 	{ "pa_stream_disconnect",
 		(void **)&SDL_NAME(pa_stream_disconnect)	},
 	{ "pa_stream_unref",
@@ -279,7 +288,10 @@ static SDL_AudioDevice *Audio_CreateDevi
 	this->WaitAudio = PULSE_WaitAudio;
 	this->PlayAudio = PULSE_PlayAudio;
 	this->GetAudioBuf = PULSE_GetAudioBuf;
+	this->PauseAudio = PULSE_PauseAudio;
+	this->WakeAudio = PULSE_WakeAudio;
 	this->CloseAudio = PULSE_CloseAudio;
+
 	this->WaitDone = PULSE_WaitDone;
 
 	this->free = Audio_DeleteDevice;
@@ -295,23 +307,25 @@ AudioBootStrap PULSE_bootstrap = {
 /* This function waits until it is possible to write a full sound buffer */
 static void PULSE_WaitAudio(_THIS)
 {
-	int size;
-	while(1) {
+	do {
 		if (SDL_NAME(pa_context_get_state)(context) != PA_CONTEXT_READY ||
 		    SDL_NAME(pa_stream_get_state)(stream) != PA_STREAM_READY ||
 		    SDL_NAME(pa_mainloop_iterate)(mainloop, 1, NULL) < 0) {
 			this->enabled = 0;
 			return;
 		}
-		size = SDL_NAME(pa_stream_writable_size)(stream);
+		int size = SDL_NAME(pa_stream_writable_size)(stream);
 		if (size >= mixlen)
 			return;
-	}
+	} while (this->enabled && !this->dev_paused);
+	/* If dev_paused, go back to the mainloop if we are awaken to check stuff
+	 * like Unpause from time to time. */
 }
 
 static void PULSE_PlayAudio(_THIS)
 {
 	/* Write the audio data */
+	if (this->dev_paused) return;
 	if (SDL_NAME(pa_stream_write)(stream, mixbuf, mixlen, NULL, 0LL, PA_SEEK_RELATIVE) < 0)
 		this->enabled = 0;
 }
@@ -321,6 +335,31 @@ static Uint8 *PULSE_GetAudioBuf(_THIS)
 	return(mixbuf);
 }
 
+static void stream_cork_complete(pa_stream *s, int success, void *userdata) {
+}
+
+static void PULSE_PauseAudio(_THIS, int pause_on)
+{
+	pa_operation *o;
+
+	o = SDL_NAME(pa_stream_cork)(stream, pause_on, stream_cork_complete, NULL);
+	if (!o)
+		return;
+
+	/* Pausing audio can be an asynchronous operation;
+	 * we will send silence in the meanwhile. */
+
+	SDL_NAME(pa_operation_unref)(o);
+}
+
+static void PULSE_WakeAudio(_THIS)
+{
+	/* This can be called asynchronously to wakeup the audio thread. */
+	if (mainloop != NULL) {
+		SDL_NAME(pa_mainloop_wakeup)(mainloop);
+	}
+}
+
 static void PULSE_CloseAudio(_THIS)
 {
 	if ( mixbuf != NULL ) {
@@ -401,7 +440,9 @@ static int PULSE_OpenAudio(_THIS, SDL_Au
 	pa_sample_spec  paspec;
 	pa_buffer_attr  paattr;
 	pa_channel_map  pacmap;
-	pa_stream_flags_t flags = 0;
+	pa_stream_flags_t flags = PA_STREAM_START_CORKED;
+
+	this->dev_paused = 1;
 
 	paspec.format = PA_SAMPLE_INVALID;
 	for ( test_format = SDL_FirstAudioFormat(spec->format); test_format; ) {
@@ -449,7 +490,7 @@ static int PULSE_OpenAudio(_THIS, SDL_Au
 	paattr.maxlength = -1;
 	paattr.minreq = mixlen; /* -1 can lead to pa_stream_writable_size()
 				   >= mixlen never becoming true */
-	flags = PA_STREAM_ADJUST_LATENCY;
+	flags |= PA_STREAM_ADJUST_LATENCY;
 #else
 	paattr.tlength = mixlen*2;
 	paattr.prebuf = mixlen*2;
Index: repo/include/SDL_audio.h
===================================================================
--- repo.orig/include/SDL_audio.h
+++ repo/include/SDL_audio.h
@@ -196,6 +196,13 @@ extern DECLSPEC SDL_audiostatus SDLCALL
 extern DECLSPEC void SDLCALL SDL_PauseAudio(int pause_on);
 
 /**
+ * This function does the same as SDL_PauseAudio(), but can be called even
+ * when there's no active audio stream, and will override SDL_PauseAudio():
+ * Audio will only play if it is not suppressed and not paused.
+ */
+extern DECLSPEC void SDLCALL SDL_SuppressAudio(int pause_on);
+
+/**
  * This function loads a WAVE from the data source, automatically freeing
  * that source if 'freesrc' is non-zero.  For example, to load a WAVE file,
  * you could do:
