Index: SDL-1.2.14/include/SDL_mouse.h
===================================================================
--- SDL-1.2.14.orig/include/SDL_mouse.h
+++ SDL-1.2.14/include/SDL_mouse.h
@@ -54,6 +54,7 @@ typedef struct SDL_Cursor {
  * be tested using the SDL_BUTTON(X) macros, and x and y are set to the
  * current mouse cursor position.  You can pass NULL for either x or y.
  */
+extern DECLSPEC Uint8 SDLCALL SDL_GetMultiMouseState(int which, int *x, int *y);
 extern DECLSPEC Uint8 SDLCALL SDL_GetMouseState(int *x, int *y);
 
 /**
@@ -62,6 +63,7 @@ extern DECLSPEC Uint8 SDLCALL SDL_GetMou
  * be tested using the SDL_BUTTON(X) macros, and x and y are set to the
  * mouse deltas since the last call to SDL_GetRelativeMouseState().
  */
+extern DECLSPEC Uint8 SDLCALL SDL_GetRelativeMultiMouseState(int which, int *x, int *y);
 extern DECLSPEC Uint8 SDLCALL SDL_GetRelativeMouseState(int *x, int *y);
 
 /**
@@ -134,6 +136,9 @@ extern DECLSPEC int SDLCALL SDL_ShowCurs
 #define SDL_BUTTON_X2MASK	SDL_BUTTON(SDL_BUTTON_X2)
 /*@}*/
 
+/** Defines the maximum of number of mice */
+#define SDL_MAXMOUSE        10
+
 /* Ends C function definitions when using C++ */
 #ifdef __cplusplus
 }
Index: SDL-1.2.14/src/events/SDL_events_c.h
===================================================================
--- SDL-1.2.14.orig/src/events/SDL_events_c.h
+++ SDL-1.2.14/src/events/SDL_events_c.h
@@ -55,8 +55,12 @@ extern Uint8 SDL_ProcessEvents[SDL_NUMEV
    (from SDL_active.c, SDL_mouse.c, SDL_keyboard.c, SDL_quit.c, SDL_events.c)
  */
 extern int SDL_PrivateAppActive(Uint8 gain, Uint8 state);
+extern int SDL_PrivateMultiMouseMotion(int which, Uint8 buttonstate,
+						int relative, Sint16 x, Sint16 y);
 extern int SDL_PrivateMouseMotion(Uint8 buttonstate, int relative,
 						Sint16 x, Sint16 y);
+extern int SDL_PrivateMultiMouseButton(int which, Uint8 state, Uint8 button,
+						Sint16 x, Sint16 y);
 extern int SDL_PrivateMouseButton(Uint8 state, Uint8 button,Sint16 x,Sint16 y);
 extern int SDL_PrivateKeyboard(Uint8 state, SDL_keysym *key);
 extern int SDL_PrivateResize(int w, int h);
@@ -68,6 +72,7 @@ extern int SDL_PrivateSysWMEvent(SDL_Sys
 extern void SDL_SetMouseRange(int maxX, int maxY);
 
 /* Used by the activity event handler to remove mouse focus */
+extern void SDL_ResetMultiMouse(int which);
 extern void SDL_ResetMouse(void);
 
 /* Used by the activity event handler to remove keyboard focus */
Index: SDL-1.2.14/src/events/SDL_mouse.c
===================================================================
--- SDL-1.2.14.orig/src/events/SDL_mouse.c
+++ SDL-1.2.14/src/events/SDL_mouse.c
@@ -30,26 +30,30 @@
 
 
 /* These are static for our mouse handling code */
-static Sint16 SDL_MouseX = 0;
-static Sint16 SDL_MouseY = 0;
-static Sint16 SDL_DeltaX = 0;
-static Sint16 SDL_DeltaY = 0;
-static Sint16 SDL_MouseMaxX = 0;
-static Sint16 SDL_MouseMaxY = 0;
-static Uint8  SDL_ButtonState = 0;
+static Sint16 SDL_MouseX[SDL_MAXMOUSE];
+static Sint16 SDL_MouseY[SDL_MAXMOUSE];
+static Sint16 SDL_DeltaX[SDL_MAXMOUSE];
+static Sint16 SDL_DeltaY[SDL_MAXMOUSE];
+static Uint8  SDL_ButtonState[SDL_MAXMOUSE];
 
+static Sint16 SDL_MouseMaxX;
+static Sint16 SDL_MouseMaxY;
 
 /* Public functions */
 int SDL_MouseInit(void)
 {
 	/* The mouse is at (0,0) */
-	SDL_MouseX = 0;
-	SDL_MouseY = 0;
-	SDL_DeltaX = 0;
-	SDL_DeltaY = 0;
+	int i;
+	for (i = 0; i < SDL_MAXMOUSE; i++) {
+		SDL_MouseX[i] = 0;
+		SDL_MouseY[i] = 0;
+		SDL_DeltaX[i] = 0;
+		SDL_DeltaY[i] = 0;
+		SDL_ButtonState[i] = 0;
+	}
+
 	SDL_MouseMaxX = 0;
 	SDL_MouseMaxY = 0;
-	SDL_ButtonState = 0;
 
 	/* That's it! */
 	return(0);
@@ -59,36 +63,57 @@ void SDL_MouseQuit(void)
 }
 
 /* We lost the mouse, so post button up messages for all pressed buttons */
-void SDL_ResetMouse(void)
+void SDL_ResetMultiMouse(int which)
 {
 	Uint8 i;
-	for ( i = 0; i < sizeof(SDL_ButtonState)*8; ++i ) {
-		if ( SDL_ButtonState & SDL_BUTTON(i) ) {
-			SDL_PrivateMouseButton(SDL_RELEASED, i, 0, 0);
+
+	if ( !SDL_ButtonState[which] ) return;
+
+	for ( i = 0; i < sizeof(SDL_ButtonState[which])*8; ++i ) {
+		if ( SDL_ButtonState[which] & SDL_BUTTON(i) ) {
+			SDL_PrivateMultiMouseButton(which, SDL_RELEASED, i, 0, 0);
 		}
 	}
 }
 
-Uint8 SDL_GetMouseState (int *x, int *y)
+void SDL_ResetMouse(void)
+{
+	int i;
+	for (i = 0; i < SDL_MAXMOUSE; i++) {
+		SDL_ResetMultiMouse(i);
+	}
+}
+
+Uint8 SDL_GetMultiMouseState (int which, int *x, int *y)
 {
 	if ( x ) {
-		*x = SDL_MouseX;
+		*x = SDL_MouseX[which];
 	}
 	if ( y ) {
-		*y = SDL_MouseY;
+		*y = SDL_MouseY[which];
 	}
-	return(SDL_ButtonState);
+	return(SDL_ButtonState[which]);
 }
 
-Uint8 SDL_GetRelativeMouseState (int *x, int *y)
+Uint8 SDL_GetMouseState (int *x, int *y)
+{
+	return SDL_GetMultiMouseState(0, x, y);
+}
+
+Uint8 SDL_GetRelativeMultiMouseState (int which, int *x, int *y)
 {
 	if ( x )
-		*x = SDL_DeltaX;
+		*x = SDL_DeltaX[which];
 	if ( y )
-		*y = SDL_DeltaY;
-	SDL_DeltaX = 0;
-	SDL_DeltaY = 0;
-	return(SDL_ButtonState);
+		*y = SDL_DeltaY[which];
+	SDL_DeltaX[which] = 0;
+	SDL_DeltaY[which] = 0;
+	return(SDL_ButtonState[which]);
+}
+
+Uint8 SDL_GetRelativeMouseState (int *x, int *y)
+{
+	return SDL_GetRelativeMultiMouseState(0, x, y);
 }
 
 static void ClipOffset(Sint16 *x, Sint16 *y)
@@ -110,7 +135,7 @@ void SDL_SetMouseRange(int maxX, int max
 }
 
 /* These are global for SDL_eventloop.c */
-int SDL_PrivateMouseMotion(Uint8 buttonstate, int relative, Sint16 x, Sint16 y)
+int SDL_PrivateMultiMouseMotion(int which, Uint8 buttonstate, int relative, Sint16 x, Sint16 y)
 {
 	int posted;
 	Uint16 X, Y;
@@ -119,15 +144,15 @@ int SDL_PrivateMouseMotion(Uint8 buttons
 
 	/* Default buttonstate is the current one */
 	if ( ! buttonstate ) {
-		buttonstate = SDL_ButtonState;
+		buttonstate = SDL_ButtonState[which];
 	}
 
 	Xrel = x;
 	Yrel = y;
 	if ( relative ) {
 		/* Push the cursor around */
-		x = (SDL_MouseX+x);
-		y = (SDL_MouseY+y);
+		x = (SDL_MouseX[which] + x);
+		y = (SDL_MouseY[which] + y);
 	} else {
 		/* Do we need to clip {x,y} ? */
 		ClipOffset(&x, &y);
@@ -155,8 +180,8 @@ int SDL_PrivateMouseMotion(Uint8 buttons
 	   the screen is windowed mode and the mouse is outside the window.
 	*/
 	if ( ! relative ) {
-		Xrel = X-SDL_MouseX;
-		Yrel = Y-SDL_MouseY;
+		Xrel = X - SDL_MouseX[which];
+		Yrel = Y - SDL_MouseY[which];
 	}
 
 	/* Drop events that don't change state */
@@ -168,12 +193,15 @@ printf("Mouse event didn't change state
 	}
 
 	/* Update internal mouse state */
-	SDL_ButtonState = buttonstate;
-	SDL_MouseX = X;
-	SDL_MouseY = Y;
-	SDL_DeltaX += Xrel;
-	SDL_DeltaY += Yrel;
-        SDL_MoveCursor(SDL_MouseX, SDL_MouseY);
+	SDL_ButtonState[which] = buttonstate;
+	SDL_MouseX[which] = X;
+	SDL_MouseY[which] = Y;
+	SDL_DeltaX[which] += Xrel;
+	SDL_DeltaY[which] += Yrel;
+	if (which == 0) {
+		/* Redraw main pointer */
+		SDL_MoveCursor(X, Y);
+	}
 
 	/* Post the event, if desired */
 	posted = 0;
@@ -181,6 +209,7 @@ printf("Mouse event didn't change state
 		SDL_Event event;
 		SDL_memset(&event, 0, sizeof(event));
 		event.type = SDL_MOUSEMOTION;
+		event.motion.which = which;
 		event.motion.state = buttonstate;
 		event.motion.x = X;
 		event.motion.y = Y;
@@ -194,7 +223,12 @@ printf("Mouse event didn't change state
 	return(posted);
 }
 
-int SDL_PrivateMouseButton(Uint8 state, Uint8 button, Sint16 x, Sint16 y)
+int SDL_PrivateMouseMotion(Uint8 buttonstate, int relative, Sint16 x, Sint16 y)
+{
+	return SDL_PrivateMultiMouseMotion(0, buttonstate, relative, x, y);
+}
+
+int SDL_PrivateMultiMouseButton(int which, Uint8 state, Uint8 button, Sint16 x, Sint16 y)
 {
 	SDL_Event event;
 	int posted;
@@ -223,12 +257,12 @@ int SDL_PrivateMouseButton(Uint8 state,
 		move_mouse = 0;
 	}
 	if ( ! x )
-		x = SDL_MouseX;
+		x = SDL_MouseX[which];
 	if ( ! y )
-		y = SDL_MouseY;
+		y = SDL_MouseY[which];
 
 	/* Figure out which event to perform */
-	buttonstate = SDL_ButtonState;
+	buttonstate = SDL_ButtonState[which];
 	switch ( state ) {
 		case SDL_PRESSED:
 			event.type = SDL_MOUSEBUTTONDOWN;
@@ -244,16 +278,19 @@ int SDL_PrivateMouseButton(Uint8 state,
 	}
 
 	/* Update internal mouse state */
-	SDL_ButtonState = buttonstate;
+	SDL_ButtonState[which] = buttonstate;
 	if ( move_mouse ) {
-		SDL_MouseX = x;
-		SDL_MouseY = y;
-		SDL_MoveCursor(SDL_MouseX, SDL_MouseY);
+		SDL_MouseX[which] = x;
+		SDL_MouseY[which] = y;
+		if (which == 0) {
+			SDL_MoveCursor(x, y);
+		}
 	}
 
 	/* Post the event, if desired */
 	posted = 0;
 	if ( SDL_ProcessEvents[event.type] == SDL_ENABLE ) {
+		event.button.which = which;
 		event.button.state = state;
 		event.button.button = button;
 		event.button.x = x;
@@ -266,3 +303,8 @@ int SDL_PrivateMouseButton(Uint8 state,
 	return(posted);
 }
 
+int SDL_PrivateMouseButton(Uint8 state, Uint8 button, Sint16 x, Sint16 y)
+{
+	return SDL_PrivateMultiMouseButton(0, state, button, x, y);
+}
+
